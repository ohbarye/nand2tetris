module To_test = struct
  let tokenize_unit = Nand2tetris_compiler.JackTokenizer.tokenize_unit
  let tokenize_line = Nand2tetris_compiler.JackTokenizer.tokenize_line
  let tokenize = Nand2tetris_compiler.JackTokenizer.tokenize
end

let check_list input result f =
  Alcotest.(check (list string)) "same list" result (f input [])

let test_tokenize_unit () =
  let f = To_test.tokenize_unit in
  check_list "function" ["function"] f;
  check_list "main()" ["main"; "("; ")"] f;
  check_list "(-j)" ["("; "-"; "j"; ")"] f

let test_tokenize_line () =
  let f = To_test.tokenize_line in
  check_list "class Main {" ["class"; "Main"; "{"] f;
  check_list "function void main() {" ["function"; "void"; "main"; "("; ")"; "{"] f;
  check_list "let i = i * (-j);" ["let"; "i"; "="; "i"; "*"; "("; "-"; "j"; ")"; ";"] f

let test_whole_tokenize filename expected =
  let ch = open_in filename in
  let content = really_input_string ch (in_channel_length ch) in
  close_in ch;
  Alcotest.(check (list string)) "same list" expected (To_test.tokenize content)

let test_tokenize_ArrayTest_Main () =
  test_whole_tokenize "../ArrayTest/Main.jack"
    ["class"; "Main"; "{"; "function"; "void"; "main"; "("; ")"; "{"; "var"; "Array"; "a"; ";"; "var"; "int"; "length"; ";"; "var"; "int"; "i"; ","; "sum"; ";"; "let"; "length"; "="; "Keyboard"; "."; "readInt"; "("; "\"HOW MANY NUMBERS? \""; ")"; ";"; "let"; "a"; "="; "Array"; "."; "new"; "("; "length"; ")"; ";"; "let"; "i"; "="; "0"; ";"; "while"; "("; "i"; "<"; "length"; ")"; "{"; "let"; "a"; "["; "i"; "]"; "="; "Keyboard"; "."; "readInt"; "("; "\"ENTER THE NEXT NUMBER: \""; ")"; ";"; "let"; "i"; "="; "i"; "+"; "1"; ";"; "}"; "let"; "i"; "="; "0"; ";"; "let"; "sum"; "="; "0"; ";"; "while"; "("; "i"; "<"; "length"; ")"; "{"; "let"; "sum"; "="; "sum"; "+"; "a"; "["; "i"; "]"; ";"; "let"; "i"; "="; "i"; "+"; "1"; ";"; "}"; "do"; "Output"; "."; "printString"; "("; "\"THE AVERAGE IS: \""; ")"; ";"; "do"; "Output"; "."; "printInt"; "("; "sum"; "/"; "length"; ")"; ";"; "do"; "Output"; "."; "println"; "("; ")"; ";"; "return"; ";"; "}"; "}"; ]

let test_tokenize_ExpressionLessSquare_Main () =
  test_whole_tokenize "../ExpressionLessSquare/Main.jack" ["class"; "Main"; "{"; "static"; "boolean"; "test"; ";"; "function"; "void"; "main"; "("; ")"; "{"; "var"; "SquareGame"; "game"; ";"; "let"; "game"; "="; "game"; ";"; "do"; "game"; "."; "run"; "("; ")"; ";"; "do"; "game"; "."; "dispose"; "("; ")"; ";"; "return"; ";"; "}"; "function"; "void"; "test"; "("; ")"; "{"; "var"; "int"; "i"; ","; "j"; ";"; "var"; "String"; "s"; ";"; "var"; "Array"; "a"; ";"; "if"; "("; "i"; ")"; "{"; "let"; "s"; "="; "i"; ";"; "let"; "s"; "="; "j"; ";"; "let"; "a"; "["; "i"; "]"; "="; "j"; ";"; "}"; "else"; "{"; "let"; "i"; "="; "i"; ";"; "let"; "j"; "="; "j"; ";"; "let"; "i"; "="; "i"; "|"; "j"; ";"; "}"; "return"; ";"; "}"; "}"; ]

let test_tokenize_ExpressionLessSquare_Square () =
  test_whole_tokenize "../ExpressionLessSquare/Square.jack" ["class"; "Square"; "{"; "field"; "int"; "x"; ","; "y"; ";"; "field"; "int"; "size"; ";"; "constructor"; "Square"; "new"; "("; "int"; "Ax"; ","; "int"; "Ay"; ","; "int"; "Asize"; ")"; "{"; "let"; "x"; "="; "Ax"; ";"; "let"; "y"; "="; "Ay"; ";"; "let"; "size"; "="; "Asize"; ";"; "do"; "draw"; "("; ")"; ";"; "return"; "x"; ";"; "}"; "method"; "void"; "dispose"; "("; ")"; "{"; "do"; "Memory"; "."; "deAlloc"; "("; "this"; ")"; ";"; "return"; ";"; "}"; "method"; "void"; "draw"; "("; ")"; "{"; "do"; "Screen"; "."; "setColor"; "("; "x"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "y"; ","; "x"; ","; "y"; ")"; ";"; "return"; ";"; "}"; "method"; "void"; "erase"; "("; ")"; "{"; "do"; "Screen"; "."; "setColor"; "("; "x"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "y"; ","; "x"; ","; "y"; ")"; ";"; "return"; ";"; "}"; "method"; "void"; "incSize"; "("; ")"; "{"; "if"; "("; "x"; ")"; "{"; "do"; "erase"; "("; ")"; ";"; "let"; "size"; "="; "size"; ";"; "do"; "draw"; "("; ")"; ";"; "}"; "return"; ";"; "}"; "method"; "void"; "decSize"; "("; ")"; "{"; "if"; "("; "size"; ")"; "{"; "do"; "erase"; "("; ")"; ";"; "let"; "size"; "="; "size"; ";"; "do"; "draw"; "("; ")"; ";"; "}"; "return"; ";"; "}"; "method"; "void"; "moveUp"; "("; ")"; "{"; "if"; "("; "y"; ")"; "{"; "do"; "Screen"; "."; "setColor"; "("; "x"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "y"; ","; "x"; ","; "y"; ")"; ";"; "let"; "y"; "="; "y"; ";"; "do"; "Screen"; "."; "setColor"; "("; "x"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "y"; ","; "x"; ","; "y"; ")"; ";"; "}"; "return"; ";"; "}"; "method"; "void"; "moveDown"; "("; ")"; "{"; "if"; "("; "y"; ")"; "{"; "do"; "Screen"; "."; "setColor"; "("; "x"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "y"; ","; "x"; ","; "y"; ")"; ";"; "let"; "y"; "="; "y"; ";"; "do"; "Screen"; "."; "setColor"; "("; "x"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "y"; ","; "x"; ","; "y"; ")"; ";"; "}"; "return"; ";"; "}"; "method"; "void"; "moveLeft"; "("; ")"; "{"; "if"; "("; "x"; ")"; "{"; "do"; "Screen"; "."; "setColor"; "("; "x"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "y"; ","; "x"; ","; "y"; ")"; ";"; "let"; "x"; "="; "x"; ";"; "do"; "Screen"; "."; "setColor"; "("; "x"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "y"; ","; "x"; ","; "y"; ")"; ";"; "}"; "return"; ";"; "}"; "method"; "void"; "moveRight"; "("; ")"; "{"; "if"; "("; "x"; ")"; "{"; "do"; "Screen"; "."; "setColor"; "("; "x"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "y"; ","; "x"; ","; "y"; ")"; ";"; "let"; "x"; "="; "x"; ";"; "do"; "Screen"; "."; "setColor"; "("; "x"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "y"; ","; "x"; ","; "y"; ")"; ";"; "}"; "return"; ";"; "}"; "}"; ]

let test_tokenize_ExpressionLessSquare_SquareGame () =
  test_whole_tokenize "../ExpressionLessSquare/SquareGame.jack" ["class"; "SquareGame"; "{"; "field"; "Square"; "square"; ";"; "field"; "int"; "direction"; ";"; "constructor"; "SquareGame"; "new"; "("; ")"; "{"; "let"; "square"; "="; "square"; ";"; "let"; "direction"; "="; "direction"; ";"; "return"; "square"; ";"; "}"; "method"; "void"; "dispose"; "("; ")"; "{"; "do"; "square"; "."; "dispose"; "("; ")"; ";"; "do"; "Memory"; "."; "deAlloc"; "("; "square"; ")"; ";"; "return"; ";"; "}"; "method"; "void"; "moveSquare"; "("; ")"; "{"; "if"; "("; "direction"; ")"; "{"; "do"; "square"; "."; "moveUp"; "("; ")"; ";"; "}"; "if"; "("; "direction"; ")"; "{"; "do"; "square"; "."; "moveDown"; "("; ")"; ";"; "}"; "if"; "("; "direction"; ")"; "{"; "do"; "square"; "."; "moveLeft"; "("; ")"; ";"; "}"; "if"; "("; "direction"; ")"; "{"; "do"; "square"; "."; "moveRight"; "("; ")"; ";"; "}"; "do"; "Sys"; "."; "wait"; "("; "direction"; ")"; ";"; "return"; ";"; "}"; "method"; "void"; "run"; "("; ")"; "{"; "var"; "char"; "key"; ";"; "var"; "boolean"; "exit"; ";"; "let"; "exit"; "="; "key"; ";"; "while"; "("; "exit"; ")"; "{"; "while"; "("; "key"; ")"; "{"; "let"; "key"; "="; "key"; ";"; "do"; "moveSquare"; "("; ")"; ";"; "}"; "if"; "("; "key"; ")"; "{"; "let"; "exit"; "="; "exit"; ";"; "}"; "if"; "("; "key"; ")"; "{"; "do"; "square"; "."; "decSize"; "("; ")"; ";"; "}"; "if"; "("; "key"; ")"; "{"; "do"; "square"; "."; "incSize"; "("; ")"; ";"; "}"; "if"; "("; "key"; ")"; "{"; "let"; "direction"; "="; "exit"; ";"; "}"; "if"; "("; "key"; ")"; "{"; "let"; "direction"; "="; "key"; ";"; "}"; "if"; "("; "key"; ")"; "{"; "let"; "direction"; "="; "square"; ";"; "}"; "if"; "("; "key"; ")"; "{"; "let"; "direction"; "="; "direction"; ";"; "}"; "while"; "("; "key"; ")"; "{"; "let"; "key"; "="; "key"; ";"; "do"; "moveSquare"; "("; ")"; ";"; "}"; "}"; "return"; ";"; "}"; "}"; ]

let test_tokenize_Square_Main () =
  test_whole_tokenize "../Square/Main.jack" ["class"; "Main"; "{"; "static"; "boolean"; "test"; ";"; "function"; "void"; "main"; "("; ")"; "{"; "var"; "SquareGame"; "game"; ";"; "let"; "game"; "="; "SquareGame"; "."; "new"; "("; ")"; ";"; "do"; "game"; "."; "run"; "("; ")"; ";"; "do"; "game"; "."; "dispose"; "("; ")"; ";"; "return"; ";"; "}"; "function"; "void"; "test"; "("; ")"; "{"; "var"; "int"; "i"; ","; "j"; ";"; "var"; "String"; "s"; ";"; "var"; "Array"; "a"; ";"; "if"; "("; "false"; ")"; "{"; "let"; "s"; "="; "\"string constant\""; ";"; "let"; "s"; "="; "null"; ";"; "let"; "a"; "["; "1"; "]"; "="; "a"; "["; "2"; "]"; ";"; "}"; "else"; "{"; "let"; "i"; "="; "i"; "*"; "("; "-"; "j"; ")"; ";"; "let"; "j"; "="; "j"; "/"; "("; "-"; "2"; ")"; ";"; "let"; "i"; "="; "i"; "|"; "j"; ";"; "}"; "return"; ";"; "}"; "}"; ]

let test_tokenize_Square_Square () =
  test_whole_tokenize "../Square/Square.jack" ["class"; "Square"; "{"; "field"; "int"; "x"; ","; "y"; ";"; "field"; "int"; "size"; ";"; "constructor"; "Square"; "new"; "("; "int"; "Ax"; ","; "int"; "Ay"; ","; "int"; "Asize"; ")"; "{"; "let"; "x"; "="; "Ax"; ";"; "let"; "y"; "="; "Ay"; ";"; "let"; "size"; "="; "Asize"; ";"; "do"; "draw"; "("; ")"; ";"; "return"; "this"; ";"; "}"; "method"; "void"; "dispose"; "("; ")"; "{"; "do"; "Memory"; "."; "deAlloc"; "("; "this"; ")"; ";"; "return"; ";"; "}"; "method"; "void"; "draw"; "("; ")"; "{"; "do"; "Screen"; "."; "setColor"; "("; "true"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "y"; ","; "x"; "+"; "size"; ","; "y"; "+"; "size"; ")"; ";"; "return"; ";"; "}"; "method"; "void"; "erase"; "("; ")"; "{"; "do"; "Screen"; "."; "setColor"; "("; "false"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "y"; ","; "x"; "+"; "size"; ","; "y"; "+"; "size"; ")"; ";"; "return"; ";"; "}"; "method"; "void"; "incSize"; "("; ")"; "{"; "if"; "("; "("; "("; "y"; "+"; "size"; ")"; "<"; "254"; ")"; "&"; "("; "("; "x"; "+"; "size"; ")"; "<"; "510"; ")"; ")"; "{"; "do"; "erase"; "("; ")"; ";"; "let"; "size"; "="; "size"; "+"; "2"; ";"; "do"; "draw"; "("; ")"; ";"; "}"; "return"; ";"; "}"; "method"; "void"; "decSize"; "("; ")"; "{"; "if"; "("; "size"; ">"; "2"; ")"; "{"; "do"; "erase"; "("; ")"; ";"; "let"; "size"; "="; "size"; "-"; "2"; ";"; "do"; "draw"; "("; ")"; ";"; "}"; "return"; ";"; "}"; "method"; "void"; "moveUp"; "("; ")"; "{"; "if"; "("; "y"; ">"; "1"; ")"; "{"; "do"; "Screen"; "."; "setColor"; "("; "false"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "("; "y"; "+"; "size"; ")"; "-"; "1"; ","; "x"; "+"; "size"; ","; "y"; "+"; "size"; ")"; ";"; "let"; "y"; "="; "y"; "-"; "2"; ";"; "do"; "Screen"; "."; "setColor"; "("; "true"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "y"; ","; "x"; "+"; "size"; ","; "y"; "+"; "1"; ")"; ";"; "}"; "return"; ";"; "}"; "method"; "void"; "moveDown"; "("; ")"; "{"; "if"; "("; "("; "y"; "+"; "size"; ")"; "<"; "254"; ")"; "{"; "do"; "Screen"; "."; "setColor"; "("; "false"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "y"; ","; "x"; "+"; "size"; ","; "y"; "+"; "1"; ")"; ";"; "let"; "y"; "="; "y"; "+"; "2"; ";"; "do"; "Screen"; "."; "setColor"; "("; "true"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "("; "y"; "+"; "size"; ")"; "-"; "1"; ","; "x"; "+"; "size"; ","; "y"; "+"; "size"; ")"; ";"; "}"; "return"; ";"; "}"; "method"; "void"; "moveLeft"; "("; ")"; "{"; "if"; "("; "x"; ">"; "1"; ")"; "{"; "do"; "Screen"; "."; "setColor"; "("; "false"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "("; "x"; "+"; "size"; ")"; "-"; "1"; ","; "y"; ","; "x"; "+"; "size"; ","; "y"; "+"; "size"; ")"; ";"; "let"; "x"; "="; "x"; "-"; "2"; ";"; "do"; "Screen"; "."; "setColor"; "("; "true"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "y"; ","; "x"; "+"; "1"; ","; "y"; "+"; "size"; ")"; ";"; "}"; "return"; ";"; "}"; "method"; "void"; "moveRight"; "("; ")"; "{"; "if"; "("; "("; "x"; "+"; "size"; ")"; "<"; "510"; ")"; "{"; "do"; "Screen"; "."; "setColor"; "("; "false"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "x"; ","; "y"; ","; "x"; "+"; "1"; ","; "y"; "+"; "size"; ")"; ";"; "let"; "x"; "="; "x"; "+"; "2"; ";"; "do"; "Screen"; "."; "setColor"; "("; "true"; ")"; ";"; "do"; "Screen"; "."; "drawRectangle"; "("; "("; "x"; "+"; "size"; ")"; "-"; "1"; ","; "y"; ","; "x"; "+"; "size"; ","; "y"; "+"; "size"; ")"; ";"; "}"; "return"; ";"; "}"; "}"; ]

let test_tokenize_Square_SquareGame () =
  test_whole_tokenize "../Square/SquareGame.jack" ["class"; "SquareGame"; "{"; "field"; "Square"; "square"; ";"; "field"; "int"; "direction"; ";"; "constructor"; "SquareGame"; "new"; "("; ")"; "{"; "let"; "square"; "="; "Square"; "."; "new"; "("; "0"; ","; "0"; ","; "30"; ")"; ";"; "let"; "direction"; "="; "0"; ";"; "return"; "this"; ";"; "}"; "method"; "void"; "dispose"; "("; ")"; "{"; "do"; "square"; "."; "dispose"; "("; ")"; ";"; "do"; "Memory"; "."; "deAlloc"; "("; "this"; ")"; ";"; "return"; ";"; "}"; "method"; "void"; "moveSquare"; "("; ")"; "{"; "if"; "("; "direction"; "="; "1"; ")"; "{"; "do"; "square"; "."; "moveUp"; "("; ")"; ";"; "}"; "if"; "("; "direction"; "="; "2"; ")"; "{"; "do"; "square"; "."; "moveDown"; "("; ")"; ";"; "}"; "if"; "("; "direction"; "="; "3"; ")"; "{"; "do"; "square"; "."; "moveLeft"; "("; ")"; ";"; "}"; "if"; "("; "direction"; "="; "4"; ")"; "{"; "do"; "square"; "."; "moveRight"; "("; ")"; ";"; "}"; "do"; "Sys"; "."; "wait"; "("; "5"; ")"; ";"; "return"; ";"; "}"; "method"; "void"; "run"; "("; ")"; "{"; "var"; "char"; "key"; ";"; "var"; "boolean"; "exit"; ";"; "let"; "exit"; "="; "false"; ";"; "while"; "("; "~"; "exit"; ")"; "{"; "while"; "("; "key"; "="; "0"; ")"; "{"; "let"; "key"; "="; "Keyboard"; "."; "keyPressed"; "("; ")"; ";"; "do"; "moveSquare"; "("; ")"; ";"; "}"; "if"; "("; "key"; "="; "81"; ")"; "{"; "let"; "exit"; "="; "true"; ";"; "}"; "if"; "("; "key"; "="; "90"; ")"; "{"; "do"; "square"; "."; "decSize"; "("; ")"; ";"; "}"; "if"; "("; "key"; "="; "88"; ")"; "{"; "do"; "square"; "."; "incSize"; "("; ")"; ";"; "}"; "if"; "("; "key"; "="; "131"; ")"; "{"; "let"; "direction"; "="; "1"; ";"; "}"; "if"; "("; "key"; "="; "133"; ")"; "{"; "let"; "direction"; "="; "2"; ";"; "}"; "if"; "("; "key"; "="; "130"; ")"; "{"; "let"; "direction"; "="; "3"; ";"; "}"; "if"; "("; "key"; "="; "132"; ")"; "{"; "let"; "direction"; "="; "4"; ";"; "}"; "while"; "("; "~"; "("; "key"; "="; "0"; ")"; ")"; "{"; "let"; "key"; "="; "Keyboard"; "."; "keyPressed"; "("; ")"; ";"; "do"; "moveSquare"; "("; ")"; ";"; "}"; "}"; "return"; ";"; "}"; "}"; 

  ]

let tests = [
  "test_tokenize_unit", `Quick, test_tokenize_unit;
  "test_tokenize_line", `Quick, test_tokenize_line;
  "test_tokenize_ArrayTest_Main", `Quick, test_tokenize_ArrayTest_Main;
  "test_tokenize_ExpressionLessSquare_Main", `Quick, test_tokenize_ExpressionLessSquare_Main;
  "test_tokenize_ExpressionLessSquare_Square", `Quick, test_tokenize_ExpressionLessSquare_Square;
  "test_tokenize_ExpressionLessSquare_SquareGame", `Quick, test_tokenize_ExpressionLessSquare_SquareGame;
  "test_tokenize_Square_Main", `Quick, test_tokenize_Square_Main;
  "test_tokenize_Square_Square", `Quick, test_tokenize_Square_Square;
  "test_tokenize_Square_SquareGame", `Quick, test_tokenize_Square_SquareGame;
]